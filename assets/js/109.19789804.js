(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{515:function(v,_,t){"use strict";t.r(_);var s=t(2),l=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"图形学基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图形学基础"}},[v._v("#")]),v._v(" 图形学基础")]),v._v(" "),_("h3",{attrs:{id:"svg、canvas、webgl的区别以及各自的适用领域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#svg、canvas、webgl的区别以及各自的适用领域"}},[v._v("#")]),v._v(" "),_("strong",[v._v("svg")]),v._v("、"),_("strong",[v._v("canvas")]),v._v("、"),_("strong",[v._v("webgl")]),v._v("的区别以及各自的适用领域")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[v._v("名称")]),v._v(" "),_("th",[v._v("定义")]),v._v(" "),_("th",[v._v("应用领域")])])]),v._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[_("strong",[v._v("svg")])]),v._v(" "),_("td",[v._v("是基于 XML 的矢量图形格式,不依赖分辨率,可以放大缩小而不失真。它使用 XML 标签来描述二维图形")]),v._v(" "),_("td",[v._v("需要高度缩放和交互的场景,如图标、信息图形、UI 组件等")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[_("strong",[v._v("canvas")])]),v._v(" "),_("td",[v._v("是逐像素渲染的位图格式, 依赖分辨率, 放大缩小会失真。它使用 JavaScript 来绘制二维图形")]),v._v(" "),_("td",[v._v("需要高性能绘制和动画的场景,如游戏、数据可视化等")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[_("strong",[v._v("webgl")])]),v._v(" "),_("td",[v._v("是一种实现在浏览器端的3D绘图标准，WebGL基于OpenGL的标准封装的一套Javascript 的图形API")]),v._v(" "),_("td",[v._v("需要展示 3D 内容和场景的场景,如 3D 模型查看器、3D 游戏等")])])])]),v._v(" "),_("p",[v._v("总的来说,")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("SVG")]),v._v(" 强调于图形, "),_("strong",[v._v("Canvas")]),v._v(" 和 "),_("strong",[v._v("WebGL")]),v._v(" 强调于绘制")]),v._v(" "),_("li",[_("strong",[v._v("SVG")]),v._v(" 强调于低复杂度、低动态化的场景, "),_("strong",[v._v("Canvas")]),v._v(" 和 "),_("strong",[v._v("WebGL")]),v._v(" 适用于高复杂度、高动态化的场景")]),v._v(" "),_("li",[_("strong",[v._v("Canvas")]),v._v(" 和 "),_("strong",[v._v("WebGL")]),v._v(" 依赖于 "),_("strong",[v._v("JavaScript")]),v._v(",能够提供更高的可定制性和动态特性")]),v._v(" "),_("li",[_("strong",[v._v("WebGL")]),v._v(" 专注于 "),_("strong",[v._v("3D")]),v._v(" 图形,提供了 "),_("strong",[v._v("GPU")]),v._v(" 加速的 "),_("strong",[v._v("3D")]),v._v(" 图形绘制能力")])]),v._v(" "),_("h3",{attrs:{id:"webgl的运行流程、顶点着色器与片断着色器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webgl的运行流程、顶点着色器与片断着色器"}},[v._v("#")]),v._v(" webgl的运行流程、顶点着色器与片断着色器")]),v._v(" "),_("p",[v._v("运行流程分为以下阶段:")]),v._v(" "),_("blockquote",[_("p",[v._v("图片取自 https://juejin.cn/post/7226301946838417467")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/images/WebGL/webgl-ideas.awebp",alt:"webgl ideas"}})]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("顶点着色器")]),v._v(" - 通过顶点 着色器语言(GLSL)计算每个顶点的最终位置、颜色、纹理坐标等数据")])]),v._v(" "),_("blockquote",[_("p",[v._v("图片取自 https://juejin.cn/post/7226301946838417467")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/images/WebGL/glsl-top.awebp",alt:"顶点着色器原理示意图"}})]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("p",[v._v("图元装配 - 将计算出来的顶点数据组装成图形要绘制的形状, 如三角形、矩形等")])]),v._v(" "),_("li",[_("p",[v._v("光栅化 - 将组装出来的图形分解成像素, 计算每个像素的最终颜色")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("片元着色器")]),v._v(" - 通过片元 着色器语言(GLSL)计算每个像素(片元)的最终颜色")])])]),v._v(" "),_("blockquote",[_("p",[v._v("图片取自 https://juejin.cn/post/7226301946838417467")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/images/WebGL/glsl-place.awebp",alt:"片元着色器原理示意图"}})]),v._v(" "),_("ol",{attrs:{start:"5"}},[_("li",[_("p",[v._v("深度测试 - 判断像素的深度值, 只绘制最接近视点的像素")])]),v._v(" "),_("li",[_("p",[v._v("模板测试 - 通过模板遮罩剔除不需要的像素")])]),v._v(" "),_("li",[_("p",[v._v("融合 - 将最终的像素颜色值输出到帧缓冲")])])]),v._v(" "),_("p",[v._v("这里重点提到 "),_("strong",[v._v("顶点着色器")]),v._v(" 和 "),_("strong",[v._v("片元着色器")])]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("顶点着色器主要功能")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("计算顶点的最终位置 - 通过矩阵变换(平移、旋转、缩放)等操作。")])]),v._v(" "),_("li",[_("p",[v._v("计算顶点的颜色 - 通过光照模型计算出顶点的漫反射颜色。")])]),v._v(" "),_("li",[_("p",[v._v("计算顶点的纹理坐标 - 对应到2D或3D贴图上。")])]),v._v(" "),_("li",[_("p",[v._v("将计算出来的数据通过varying变量传递给片元着色器。")])])])]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("片元着色器主要功能")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("根据varying变量的值, 通过线性插值计算出每个像素的最终值。")])]),v._v(" "),_("li",[_("p",[v._v("计算出每个像素(片元)的最终颜色。")])]),v._v(" "),_("li",[_("p",[v._v("通过纹理采样得到每个片元的值。")])]),v._v(" "),_("li",[_("p",[v._v("通过片元着色器语言, 计算出复杂的着色效果。")])]),v._v(" "),_("li",[_("p",[v._v("输出gl_FragColor变量, 包含最终的片元颜色值。")])])])]),v._v(" "),_("ul",[_("li",[v._v("模型格式的了解、材质、贴图、法向贴图")])]),v._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[v._v("参考资料")]),v._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/260973533",target:"_blank",rel:"noopener noreferrer"}},[v._v("游戏资源中常见的贴图类型"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/366436672",target:"_blank",rel:"noopener noreferrer"}},[v._v("Unity移动平台贴图格式总结"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://www.zhihu.com/question/25745472",target:"_blank",rel:"noopener noreferrer"}},[v._v("贴图、纹理、材质的区别是什么"),_("OutboundLink")],1)])])]),v._v(" "),_("p",[v._v("通过组合不同的贴图和设置合适的材质属性, 可以创建出各种复杂的材质效果.")]),v._v(" "),_("p",[_("strong",[v._v("贴图")]),v._v("(Map)是将图像(Texture)映射到3D几何体表面上的过程")]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("贴图")]),v._v(" "),_("ul",[_("li",[v._v("Diffuse Map(漫反射贴图): 表示物体的颜色")]),v._v(" "),_("li",[v._v("Normal Map(法线贴图): 存储表面法线方向信息")]),v._v(" "),_("li",[v._v("Specular Map(高光贴图): 控制高光的颜色和强度")]),v._v(" "),_("li",[v._v("Gloss Map(光泽度贴图): 定义物体的粗糙度")]),v._v(" "),_("li",[v._v("Displacement Map(置换贴图): 改变物体几何形状")]),v._v(" "),_("li",[v._v("Ambient Occlusion Map(环境光遮蔽贴图): 模拟物体表面受环境光遮蔽的情况")]),v._v(" "),_("li",[v._v("Emissive Map(自发光贴图): 控制物体发出的自发光颜色")])])]),v._v(" "),_("p",[_("strong",[v._v("纹理")]),v._v("(Texture)是贴图的基础, 是重复性的图像数据")]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("纹理")]),v._v(" "),_("p",[v._v("常见的格式有:")]),v._v(" "),_("ul",[_("li",[v._v("RGB(A)格式: 包含R、G、B三个(或四个)颜色通道")]),v._v(" "),_("li",[v._v("Normal Map格式: 用于法线贴图")]),v._v(" "),_("li",[v._v("Height Map格式: 用于置换贴图")]),v._v(" "),_("li",[v._v("Gradient Map格式: 用于渐变效果")]),v._v(" "),_("li",[v._v("Color LUT格式: 颜色查找表")])])]),v._v(" "),_("p",[_("strong",[v._v("材质")]),v._v("(Material)包含了物体表面与光线交互的所有信息")]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("材质")]),v._v(" "),_("ul",[_("li",[v._v("贴图(Maps): Diffuse Map、Specular Map等")]),v._v(" "),_("li",[v._v("光照模型(Shader): Lambert、Phong、Cook-Torrance等")]),v._v(" "),_("li",[v._v("材质属性: 颜色、透明度、光泽等")])])]),v._v(" "),_("h3",{attrs:{id:"坐标系变换过程、渲染管线的流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#坐标系变换过程、渲染管线的流程"}},[v._v("#")]),v._v(" 坐标系变换过程、渲染管线的流程")]),v._v(" "),_("p",[_("strong",[v._v("坐标系变换过程")]),v._v("指将一个坐标系下的点、向量或坐标变换到另一个坐标系下的过程。总结分为两步:")]),v._v(" "),_("ol",[_("li",[v._v("确定变换矩阵")]),v._v(" "),_("li",[v._v("通过变换矩阵变换坐标")])]),v._v(" "),_("p",[_("strong",[v._v("渲染管线的流程")]),v._v("主要分为"),_("strong",[v._v("几何阶段")]),v._v("和"),_("strong",[v._v("光栅化阶段")]),v._v("两个大部分")]),v._v(" "),_("p",[v._v("整个过程可以概括为:")]),v._v(" "),_("p",[v._v("通过着色器和各种转换, 将3D空间中的物体渲染到2D屏幕上")]),v._v(" "),_("blockquote",[_("p",[v._v("3D顶点坐标 -> D屏幕坐标 -> 片元 -> 像素颜色")])]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("几何阶段")]),v._v(" "),_("p",[v._v("主要负责将3D空间中的顶点数据转换到2D屏幕空间")]),v._v(" "),_("ul",[_("li",[v._v("顶点着色器: 对顶点数据进行变换、光照计算等")]),v._v(" "),_("li",[v._v("曲面细分着色器: 对顶点进行细分, 增加细节")]),v._v(" "),_("li",[v._v("裁剪: 剔除不可见的顶点")]),v._v(" "),_("li",[v._v("投影变换: 将3D坐标转换为2D屏幕坐标")])])]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("光栅化阶段")]),v._v(" "),_("p",[v._v("主要将顶点数据转换为片元(像素),最终得到像素颜色")]),v._v(" "),_("ul",[_("li",[v._v("三角形设置: 将顶点连接成三角形网格")]),v._v(" "),_("li",[v._v("三角形遍历: 得到三角形覆盖的像素位置, 生成片元")]),v._v(" "),_("li",[v._v("片元着色器: 根据输入数据计算片元颜色")]),v._v(" "),_("li",[v._v("片元操作: 对片元进行测试(深度、模板等)和颜色混合, 得到最终像素颜色")])])]),v._v(" "),_("h3",{attrs:{id:"前向渲染-延迟渲染、分块渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前向渲染-延迟渲染、分块渲染"}},[v._v("#")]),v._v(" 前向渲染/延迟渲染、分块渲染")]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("前向渲染(Forward Rendering)")]),v._v(" "),_("ul",[_("li",[v._v("着色、几何体、材质在同一环节计算")]),v._v(" "),_("li",[v._v("适合简单场景和半透明表面")]),v._v(" "),_("li",[v._v("可以使用多重采样抗锯齿(MSAA)")]),v._v(" "),_("li",[v._v("擅长材质和灯光效果")]),v._v(" "),_("li",[v._v("动态光照对性能有影响")]),v._v(" "),_("li",[v._v("公式复杂度: O(num_geometry_fragments * num_lights)")])])]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("延迟渲染(Deferred Rendering)")]),v._v(" "),_("ul",[_("li",[v._v("使用GBuffer缓存, 分两步进行着色")]),v._v(" "),_("li",[v._v("适合复杂场景和动态光照")]),v._v(" "),_("li",[v._v("不能使用多重采样抗锯齿(MSAA)")]),v._v(" "),_("li",[v._v("禁用一些功能时更灵活")]),v._v(" "),_("li",[v._v("动态光照对性能影响小")]),v._v(" "),_("li",[v._v("公式复杂度: O(screen_resolution * num_lights)")])])]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("分块渲染(Forward+ Rendering)")]),v._v(" "),_("ul",[_("li",[v._v("将场景分块,对不同块使用不同渲染方式")]),v._v(" "),_("li",[v._v("简单块使用前向渲染")]),v._v(" "),_("li",[v._v("复杂块使用延迟渲染")]),v._v(" "),_("li",[v._v("融合前向和延迟渲染的优点")]),v._v(" "),_("li",[v._v("适合大型复杂场景")]),v._v(" "),_("li",[v._v("需要更多开销切换不同渲染方式")])])]),v._v(" "),_("p",[v._v("总的来说:")]),v._v(" "),_("ul",[_("li",[v._v("前向渲染适用于简单场景, 延迟渲染适用于动态光照场景")]),v._v(" "),_("li",[v._v("分块渲染可以将场景分块, 针对不同块使用不同渲染方式, 融合前向渲染和延迟渲染的优点")]),v._v(" "),_("li",[v._v("选择渲染方式需要综合考虑场景复杂度、硬件配置、目标效果等多方面因素")])]),v._v(" "),_("h3",{attrs:{id:"帧缓冲、离屏渲染"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#帧缓冲、离屏渲染"}},[v._v("#")]),v._v(" 帧缓冲、离屏渲染")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[v._v("名称")]),v._v(" "),_("th",[v._v("定义")]),v._v(" "),_("th",[v._v("目的")]),v._v(" "),_("th",[v._v("过程")]),v._v(" "),_("th",[v._v("性能")]),v._v(" "),_("th",[v._v("应用场景")])])]),v._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[_("strong",[v._v("帧缓冲")]),v._v("(Frame Buffer)")]),v._v(" "),_("td",[v._v("屏幕显示图像的直接映射, 它存储着最终需要显示在屏幕上的像素数据")]),v._v(" "),_("td",[v._v("最终显示在屏幕上的目标")]),v._v(" "),_("td",[v._v("帧缓冲直接将渲染结果输出到屏幕")]),v._v(" "),_("td",[v._v("直接输出, 性能更高")]),v._v(" "),_("td",[v._v("简单的渲染场景")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[_("strong",[v._v("离屏渲染")]),v._v("(Off-Screen Rendering)")]),v._v(" "),_("td",[v._v("将渲染结果先渲染到一块离屏内存区, 然后再将结果复制到帧缓冲显示")]),v._v(" "),_("td",[v._v("将渲染结果先存储在一块内存, 然后再复制到帧缓冲显示")]),v._v(" "),_("td",[v._v("先将结果渲染到一块内存, 然后再将这块内存复制到帧缓冲")]),v._v(" "),_("td",[v._v("多了一次内存复制的过程, 性能相对较低")]),v._v(" "),_("td",[v._v("需要多次修改渲染结果的复杂场景, 如进行特效处理")])])])]),v._v(" "),_("p",[v._v("总结:")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("帧缓冲")]),v._v("是最终渲染输出的目标, 离屏渲染是一种先渲染到内存再输出的方式")]),v._v(" "),_("li",[_("strong",[v._v("离屏渲染")]),v._v("主要用于处理那些无法通过单次遍历帧缓冲就能完成渲染的复杂场景")])]),v._v(" "),_("h3",{attrs:{id:"光照类型、光照模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#光照类型、光照模型"}},[v._v("#")]),v._v(" 光照类型、光照模型")]),v._v(" "),_("p",[v._v("光照类型主要分为两种类型:")]),v._v(" "),_("p",[_("strong",[v._v("直接光照")]),v._v(": 光源直接照射到物体表面上, 产生的光照效果")]),v._v(" "),_("p",[_("strong",[v._v("间接光照")]),v._v(": 光源光线首先照射到其他物体上, 然后再反射或透射到目标物体上, 产生的光照效果")]),v._v(" "),_("p",[_("strong",[v._v("直接光照")]),v._v("比较直接和明显, 主要影响物体的明暗程度. "),_("strong",[v._v("间接光照")]),v._v("则会影响物体的亮度分布和阴影效果")]),v._v(" "),_("p",[_("strong",[v._v("光照模型")]),v._v("是根据光学定律,模拟自然界中光照物理过程的计算机模型. 主要有以下:")]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("光照模型")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("环境光模型: 只考虑环境光的影响")])]),v._v(" "),_("li",[_("p",[v._v("漫反射模型(Lambert模型): 考虑漫反射效果")])]),v._v(" "),_("li",[_("p",[v._v("镜面反射模型(Phong模型): 考虑镜面反射效果")])]),v._v(" "),_("li",[_("p",[v._v("Blinn-Phong模型: 改进自Phong模型, 加速了镜面反射计算")])]),v._v(" "),_("li",[_("p",[v._v("基于物理的渲染方程: 基于物理光学原理的模型, 考虑了多重反射和全局光照")])])])]),v._v(" "),_("p",[_("strong",[v._v("简单的光照模型")]),v._v("只考虑直接光照, 称为局部光照模型. 而考虑间接光照和全局光照效果的模型称为"),_("strong",[v._v("全局光照模型")]),v._v(".")]),v._v(" "),_("p",[v._v("常见的"),_("strong",[v._v("全局光照模型")]),v._v("有: 光线跟踪、辐射度方法和光子映射. 它们能产生更真实的光照效果, 但计算量也相对较大")]),v._v(" "),_("h3",{attrs:{id:"如何进行大模型的渲染、八叉树优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何进行大模型的渲染、八叉树优化"}},[v._v("#")]),v._v(" 如何进行大模型的渲染、八叉树优化")]),v._v(" "),_("p",[v._v("八叉树: 通过将模型分组,加速模型的遍历和选取,从而改进交互体验")]),v._v(" "),_("p",[v._v("主要思路:")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("建立八叉树数据结构。将整个场景空间划分为多个相互不重叠的八叉树叶节点(cell)。")])]),v._v(" "),_("li",[_("p",[v._v("将模型添加到对应的八叉树叶节点中。")])]),v._v(" "),_("li",[_("p",[v._v("进行拾取操作时,首先根据鼠标位置找到包含该位置的八叉树叶节点。")])]),v._v(" "),_("li",[_("p",[v._v("然后逐级遍历八叉树,直到找到包含鼠标位置的叶节点。")])]),v._v(" "),_("li",[_("p",[v._v("只对该叶节点中的模型进行相交测试,从而加速拾取")])])]),v._v(" "),_("h3",{attrs:{id:"光线追踪、实时光线追踪"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#光线追踪、实时光线追踪"}},[v._v("#")]),v._v(" 光线追踪、实时光线追踪")]),v._v(" "),_("p",[v._v("光线追踪(Ray Tracing)是一种计算机图形学中用于图像合成的算法。它模拟光线从光源出发,沿着指定方向传播,与场景中的物体相交,最后到达观察者眼睛的物理过程")]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("光线追踪基本思想")]),v._v(" "),_("p",[_("strong",[v._v("光线追踪")]),v._v("模拟了光在物理世界中实际的传播过程,可以生成更真实逼真的图像")]),v._v(" "),_("ul",[_("li",[v._v("从观察者眼睛出发,发射光线入场景")]),v._v(" "),_("li",[v._v("计算这些光线与场景中的物体的交点")]),v._v(" "),_("li",[v._v("计算交点处的着色,包括直接照明和间接照明")]),v._v(" "),_("li",[v._v("将各个像素的最终颜色合成为渲染图像")])])]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("光线追踪")]),v._v(" "),_("p",[v._v("与光栅化渲染相比, 优势在于")]),v._v(" "),_("ul",[_("li",[v._v("可以处理复杂的几何体和非平滑表面。")]),v._v(" "),_("li",[v._v("可以产生高质量的透视效果和阴影。")]),v._v(" "),_("li",[v._v("可以模拟镜面反射、折射、全局光照等复杂效果")])]),v._v(" "),_("p",[v._v("常见光线追踪算法:")]),v._v(" "),_("ul",[_("li",[v._v("Whitted 光线追踪: 使用递归追踪反射和折射光线")]),v._v(" "),_("li",[v._v("分布式光线追踪: 基于随机采样的光线追踪")]),v._v(" "),_("li",[v._v("路径追踪: 每次只追踪一条光线,通过多次采样来减少噪点")]),v._v(" "),_("li",[v._v("双向路径追踪: 同时从视点和光源出发追踪路径")]),v._v(" "),_("li",[v._v("Metropolis 光线追踪: 使用 Metropolis 采样方法探索路径空间")])])]),v._v(" "),_("p",[v._v("总结: 光线追踪算法模拟了光在物理世界中真实的传播过程。它能生成更逼真的图像效果,但是计算量很大")]),v._v(" "),_("p",[_("strong",[v._v("实时光线追踪")]),v._v("是一种利用光线追踪算法在高性能图形处理器上实现的技术。它能够以每秒几十或几百帧的速度模拟光线在场景中的物理行为,产生出逼真的全局光照、反射和透明效果.")]),v._v(" "),_("p",[v._v("主要依赖于专门用于光线追踪的GPU加速器(如RT Core)和降噪算法。目前主流的API有 "),_("code",[v._v("DirectX Raytracing(DXR)")]),v._v(" 和 "),_("code",[v._v("Vulkan")])]),v._v(" "),_("details",{staticClass:"custom-block details"},[_("summary",[v._v("实时光线追踪")]),v._v(" "),_("p",[v._v("与传统的光栅化渲染相比, 优势:")]),v._v(" "),_("ul",[_("li",[v._v("更逼真的全局光照效果。考虑到屏幕外的反射和折射")]),v._v(" "),_("li",[v._v("更准确的区域阴影。根据光源大小产生柔化阴影")]),v._v(" "),_("li",[v._v("更好的半透明材质效果。考虑到正确的反射、吸收和折射")]),v._v(" "),_("li",[v._v("更精细的反射效果。考虑到屏幕外的反射")])])]),v._v(" "),_("h3",{attrs:{id:"实战示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实战示例"}},[v._v("#")]),v._v(" 实战示例")]),v._v(" "),_("p",[_("em",[v._v("To be Continued...")])])])}),[],!1,null,null,null);_.default=l.exports}}]);